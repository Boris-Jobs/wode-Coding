# -*- coding: utf-8 -*-
"""
Created on Sat Apr 10 09:00:15 2021

@author: 13225
"""




class Student(object):
    #__init__是一个特殊方法用于创建对象时进行初始化操作
    #通过这个方法我们可以为学生对象绑定name和age两个属性
    def __init__(self, name, age):
        self.name=name
        self.age=age
        
    def study(self, course_name):
        print('%s正在学习%s.'%(self.name, course_name))
    
    #PEP 8要求标识符的名字用全小写的多个单词用下划线连接
    # 但是部分程序员和公司更倾向于使用驼峰命名法（驼峰标识）
    
    def watch_movie(self):
        if self.age<18:
            print('%s只能观看《熊出没》.'%self.name)
        else:
            print('%s正在观看岛国爱情大电影.'%self.name)
         
#定义好一个类以后，通过以下方式来创建对象，给对象发消息
def main():
    #创建学生对象指定姓名和年龄
    stu1=Student('Bieber',26)
    #给对象发study消息
    stu1.study('Python程序设计')
    #给对象发watch_movie消息
    stu1.watch_movie()
    stu2=Student('王大锤',15)
    stu2.study('思想品德')
    stu2.watch_movie()
    
if __name__=='__main__':
    main()









#访问可见性问题
class Test:
    def __init__(self,foo):
        self.__foo=foo
    
    def __bar(self):
        print(self.__foo)
        print('__bar')
        
"""     
def main():
    test=Test('hello')#创建对象
    test.__bar()#该对象属性为私有
    #如果希望属性是私有的，在给属性命名时可以用两个下划线为开头
    print(test.__foo)
    
if __name__=="__main__":
    main()
"""
#AttributeError: 'Test' object has no attribute '__bar'

def main():
    test=Test('hello')
    test._Test__bar()
    print(test._Test__foo)
    
if __name__=="__main__":
    main()








from time import sleep

class Clock(object):
    """"
    数字时钟
    """
    
    def __init__(self,hour=0,minute=0,second=0):#初始化方法
        self._hour=hour
        self._minute=minute
        self._second=second
        
    def run(self):#走字
        self._second+=1
        if self._second==60:
            self._second=0
            self._minute+=1
            if self._minute==60:
                self._minute=0
                self._hour+=1
                if self._hour==24:
                    self._hour=0
    
    def show(self):#显示时间
        return '%02d:%02d:%02d'%\
            (self._hour,self._minute,self._second)

def main():
    clock=Clock(23,59,58)
    count=1
    while count<=7:
        print(clock.show())
        sleep(0.28)
        clock.run()
        count+=1
        
if __name__=='__main__':
    main()






from math import sqrt

class Point(object):
    
    def __init__(self, x=0, y=0):
        self.x=x
        self.y=y
        
    def move_to(self,x,y):
        self.x=x
        self.y=y
        
    def move_by(self,dx,dy):
        self.x+=dx
        self.y+=dy
        
    def distance_to(self,other):
        dx=self.x-other.x
        dy=self.x-other.y
        return sqrt(dx**2+dy^2)
    
    def __str__(self):#注意一下这个__str__属性
        return'(%s,%s)'%(str(self.x),str(self.y))
        
    
def main():
    P1=Point(3,5)
    P2=Point()
    print(P1)
    print(P2)
    P2.move_by(-1,2)
    print(P2)
    print(P1.distance_to(P2))

if __name__=="__main__":
    main()


